phases:

- phase: buildAll_windows
  displayName: Build all tasks (Windows)
  condition: and(succeeded(), not(variables.task))
  queue:
    demands: agent.os -equals Windows_NT
    parallel: 2
  steps:

  # Slice the tasks (sets TASK_ARRAY and TASK_PATTERN)
  - script: node .\ci\set-task-slice.js
    displayName: Set task slice

  # npm install
  - script: npm install
    displayName: npm install

  # Build
  - script: node make.js build --task "$(task_pattern)"
    displayName: Build

  # Package the slice
  - script: node .\ci\create-package-slice.js
    displayName: Create package slice

  # Publish as an artifact
  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: _package/package-slice.zip
      artifactName: package-slice-$(system.jobPositionInPhase)
      artifactType: container

  # Prepend node
  - powershell: .\ci\use-node-5.ps1 # switch to NodeTool task when bug fix is deployed
    displayName: Use node $(node_version)

  # Test
  - script: node make.js test
    displayName: Test

  - script: node make.js testLegacy --task "$(task_pattern)"
    displayName: Legacy tests

  # Use node 6
  - task: NodeTool@0
    displayName: Use node 6.10.3
    inputs:
      versionSpec: "6.10.3"

  # Test
  - script: node make.js test --runner ts
    displayName: Test

  - script: node make.js testLegacy --runner ts --task "$(task_pattern)"
    displayName: Legacy tests

- phase: publish_windows
  displayName: Publish
  dependsOn: buildAll_windows
  queue:
    demands: agent.os -equals Windows_NT
  variables:
    system.enableAccessToken: true
  steps:

  # Set variables
  - powershell: |
      $publishCurrentMilestone = ''
      if ($env:BUILD_SOURCEBRANCH -match '$refs/heads/releases/m[0-9]+^') {
        $publishCurrentMilestone = 'true'
      }

      Write-Host "##vso[task.setVariable variable=publish_current_milestone]$publishCurrentMilestone"

      $publishAggregate = ''
      if ($env:PUBLISH -or $env:BUILD_SOURCEBRANCH -like 'refs/heads/releases/*') {
        $publishAggregate = 'true'
      }

      Write-Host "##vso[task.setVariable variable=publish_aggregate]$publishAggregate"

  # Download artifacts
  - task: DownloadBuildArtifact@0
    inputs:
      artifactName: package-slice-1
  - task: DownloadBuildArtifact@0
    inputs:
      artifactName: package-slice-2
  # - task: DownloadBuildArtifact@0
  #   inputs:
  #     artifactName: package-slice-3
  # - task: DownloadBuildArtifact@0
  #   inputs:
  #     artifactName: package-slice-4
  # - task: DownloadBuildArtifact@0
  #   inputs:
  #     artifactName: package-slice-5

  # Create current milestone layout
  - script: node .\ci\create-current-milestone-layout.js
    displayName: Create current milestone layout

  # Use NuGet 4
  - task: NuGetToolInstaller@0
    displayName: Use NuGet 4
    condition: and(succeeded(), or(variables.publish_current_milestone, variables.publish_aggregate))
    inputs:
      versionSpec: 4.0.0

  # Pack current milestone
  - script: nuget pack vsts-tasks-milestone.nuspec -BasePath current-milestone-layout -NoDefaultExcludes
    displayName: Pack current milestone
    condition: and(succeeded(), variables.publish_current_milestone)
    workingDirectory: _package

  # Publish current milestone package (CONDITIONAL)

# TODO: USE GIT LOG TO INFER PREVIOUS RELEASE BRANCHES BASED ON THE CURRENT BRANCH

  # Generate packages.config for previous milestones
  - script: node .\ci\create-restore-config.js
    displayName: Create restore config

  # Restore previous milestones

  # Create aggregate layout (and write .nuspec and pack) - SHOULD BE AN INCREMENTING VERSION NUMBER

  # Publish aggregate package (CONDITIONAL)

  # Publish aggregate package layout as an artifact


  # $now = [System.DateTime]::UtcNow
  # $version = "0.$('{0:yyyyMMdd}' -f $now).$([System.Math]::Floor($now.timeofday.totalseconds))-m123-commit"
  # ##vso[build.updatebuildnumber]build number

# <?xml version="1.0" encoding="utf-8"?>
# <packages>
#   <package id="Microsoft.CodeDom.Providers.DotNetCompilerPlatform" version="1.0.0" targetFramework="net46" />
#   <package id="Microsoft.Net.Compilers" version="1.0.0" targetFramework="net46" developmentDependency="true" />
#   <package id="Microsoft.Web.Infrastructure" version="1.0.0.0" targetFramework="net46" />
#   <package id="Microsoft.Web.Xdt" version="2.1.1" targetFramework="net46" />
#   <package id="Newtonsoft.Json" version="8.0.3" allowedVersions="(8,10]" targetFramework="net46" />
#   <package id="NuGet.Core" version="2.11.1" targetFramework="net46" />
#   <package id="NuGet.Server" version="2.11.2" targetFramework="net46" />
#   <package id="RouteMagic" version="1.3" targetFramework="net46" />
#   <package id="WebActivatorEx" version="2.1.0" targetFramework="net46" />
# </packages>




  # condition: |
  #   and(
  #     succeeded(),
  #     or(
  #       startsWith(variables['build.sourceBranch'], 'refs/heads/releases/'),
  #       variables.publish
  #     )
  #   )

- phase: buildSingle_windows
  displayName: Build Single Task (Windows)
  condition: and(succeeded(), variables.task)
  queue:
    demands: agent.os -equals Windows_NT
  steps:

  # # npm install
  # - script: npm install
  #   displayName: npm install

  # # Use node 5
  # - powershell: .\ci\use-node-5.ps1
  #   displayName: Use node 5.10.1

  # # Build
  # - script: node make.js build --task "$(task)"
  #   displayName: Build

  # # Upload artifacts before testing
  # - powershell: .\ci\upload-individual-tasks.ps1
  #   displayName: Upload artifacts
  #   condition: and(succeeded(), variables[BUILD_SOURCEBRANCH])

  # # oops tests might run before the upload queue drains

  # # Test
  # - script: node make.js test
  #   displayName: Test

  # - script: node make.js testLegacy --task "$(task)"
  #   displayName: Legacy tests

  # # Use node 6
  # - task: NodeTool@0
  #   displayName: Use node 6.10.3
  #   inputs:
  #     versionSpec: "6.10.3"

  # # Test
  # - script: node make.js test --runner ts
  #   displayName: Test

  # - script: node make.js testLegacy --runner ts --task "$(task)"
  #   displayName: Legacy tests

# - phase: abc
#   condition: and(succeeded(), startsWith(variables['build.sourceBranch'], 'refs/heads/users'))
#   steps:
#   - script: echo hello

# - phase: def
#   steps:
#   - checkout: none
#   - script: set